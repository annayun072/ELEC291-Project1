0000              1   ; Talking_Stop_Watch.asm:  The name says it all!
0000              2   ; P2.6 is the START push button
0000              3   ; P3.0 is the STOP push button.  Pressing this button plays the ellapsed time.
0000              4   ; P0.3 is the CLEAR push button.
0000              5   ; The SPI flash memory is assumed to be loaded with 'stop_watch.wav'
0000              6   ; The state diagram of the playback FSM is available as 'Stop_Watch_FSM.pdf'
0000              7   ;
0000              8   ; Copyright (C) 2012-2019  Jesus Calvino-Fraga, jesusc (at) ece.ubc.ca
0000              9   ; 
0000             10   ; This program is free software; you can redistribute it and/or modify it
0000             11   ; under the terms of the GNU General Public License as published by the
0000             12   ; Free Software Foundation; either version 2, or (at your option) any
0000             13   ; later version.
0000             14   ; 
0000             15   ; This program is distributed in the hope that it will be useful,
0000             16   ; but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             17   ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0000             18   ; GNU General Public License for more details.
0000             19   ; 
0000             20   ; You should have received a copy of the GNU General Public License
0000             21   ; along with this program; if not, write to the Free Software
0000             22   ; Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
0000             23   ; 
0000             24   ; Connections:
0000             25   ; 
0000             26   ; P89LPC9351  SPI_FLASH
0000             27   ; P2.5        Pin 6 (SPI_CLK)
0000             28   ; P2.2        Pin 5 (MOSI)
0000             29   ; P2.3        Pin 2 (MISO)
0000             30   ; P2.4        Pin 1 (CS/)
0000             31   ; GND         Pin 4
0000             32   ; 3.3V        Pins 3, 7, 8
0000             33   ;
0000             34   ; P0.4 is the DAC output which should be connected to the input of an amplifier (LM386 or similar)
0000             35   ;
0000             36   ; P2.6, P3.0, and P0.3 are connected to push buttons
0000             37   ;
0000             38   ; LCD uses pins P0.5, P0.6, P0.7, P1.2, P1.3, P1.4, P1.6
0000             39   ; WARNING: P1.2 and P1.3 need each a 1k ohm pull-up resistor to VCC (according to the datasheet!).
0000             40   ;
0000             41   ; P2.7 is used (with a transistor) to turn the speaker on/off so it doesn't have a clicking sound.  Use a NPN BJT
0000             42   ; like the 2N3904 or 2N2222A.  The emitter is connected to GND.  The base is connected to a 330 ohm resistor
0000             43   ; and pin P2.7; the other pin of the resistor is connected to 5V.  The collector is connected to the '-'
0000             44   ; terminal of the speaker.
0000             45   ;
0000             46   
                 48   $LIST
0000             50   
0000             51   CLK         EQU 14746000  ; Microcontroller system clock frequency in Hz
0000             52   CCU_RATE    EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             53   CCU_RELOAD  EQU ((65536-((CLK/(2*CCU_RATE)))))
0000             54   BAUD        EQU 115200
0000             55   BRVAL       EQU ((CLK/BAUD)-16)
0000             56   
0000             57   TIMER1_RATE   EQU 200     ; 200Hz, for a timer tick of 5ms
0000             58   TIMER1_RELOAD EQU ((65536-(CLK/(2*TIMER1_RATE))))
0000             59   
0000             60   FLASH_CE    EQU P2.4
0000             61   SOUND       EQU P2.7
0000             62   
0000             63   ; Commands supported by the SPI flash memory according to the datasheet
0000             64   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             65   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             66   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             67   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             68   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             69   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             70   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             71   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             72   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             73   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             74   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             75   
0030             76   dseg at 30H
0030             77   w:             ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0033             78   ;minutes:       ds 1
0033             79   ;seconds:       ds 1
0033             80   degrees:            ds 1
0034             81   T2S_FSM_state: ds 1
0035             82   Count5ms:      ds 1
0036             83   
0000             84   BSEG
0000             85   T2S_FSM_start: dbit 1
0001             86   seconds_flag:  dbit 1
0002             87   
0002             88   ; Connect pushbuttons to this pins to, start, stop, or clear the stop watch
0002             89   START equ P2.6
0002             90   STOP  equ P3.0
0002             91   CLEAR equ P0.3
0002             92   
0000             93   cseg
0000             94   
0000             95   org 0x0000 ; Reset vector
0000 0203F1      96       ljmp MainProgram
0003             97   
0003             98   org 0x0003 ; External interrupt 0 vector (not used in this code)
0003 32          99            reti
0004            100   
000B            101   org 0x000B ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B 32         102            reti
000C            103   
0013            104   org 0x0013 ; External interrupt 1 vector (not used in this code)
0013 32         105            reti
0014            106   
0014            107   ;org 0x001B ; Timer/Counter 1 overflow interrupt vector
0014            108   ;        ljmp Timer1_ISR
0014            109   
0023            110   org 0x0023 ; Serial port receive/transmit interrupt vector (not used in this code)
0023 32         111            reti
0024            112   
005B            113   org 0x005b ; CCU interrupt vector.  Used in this code to replay the wave file.
005B 02012A     114            ljmp CCU_ISR
005E            115   
005E            116   cseg
005E            117   ; These 'equ' must match the wiring between the microcontroller and the LCD!
005E            118   LCD_RS equ P0.5
005E            119   LCD_RW equ P0.6
005E            120   LCD_E  equ P0.7
005E            121   LCD_D4 equ P1.2
005E            122   LCD_D5 equ P1.3
005E            123   LCD_D6 equ P1.4
005E            124   LCD_D7 equ P1.6
                126   	$LIST
0113            128   
0113            129   ;---------------------------------;
0113            130   ; Timer 1 ISR initialisation
0113            131   ; removed
0113            132   ;---------------------------------;
0113            133   
0113            134   ;---------------------------------;
0113            135   ; Routine to initialize the CCU.  ;
0113            136   ; We are using the CCU timer in a ;
0113            137   ; manner similar to the timer 2   ;
0113            138   ; available in other 8051s        ;
0113            139   ;---------------------------------;
0113            140   CCU_Init:
0113 75CDFE     141            mov TH2, #high(CCU_RELOAD)
0116 75CCB2     142            mov TL2, #low(CCU_RELOAD)
0119 75CFFE     143            mov TOR2H, #high(CCU_RELOAD)
011C 75CEB2     144            mov TOR2L, #low(CCU_RELOAD)
011F 75F980     145            mov TCR21, #10000000b ; Latch the reload value
0122 75C980     146            mov TICR2, #10000000b ; Enable CCU Timer Overflow Interrupt
0125 D2EC       147            setb ECCU ; Enable CCU interrupt
0127 D2C8       148            setb TMOD20 ; Start CCU timer
0129 22         149            ret
012A            150   
012A            151   ;---------------------------------;
012A            152   ; ISR for CCU.  Used to playback  ;
012A            153   ; the WAV file stored in the SPI  ;
012A            154   ; flash memory.                   ;
012A            155   ;---------------------------------;
012A            156   CCU_ISR:
012A 75E900     157            mov TIFR2, #0 ; Clear CCU Timer Overflow Interrupt Flag bit. Actually, it clears all the bits!
012D            158            
012D            159            ; The registers used in the ISR must be saved in the stack
012D C0E0       160            push acc
012F C0D0       161            push psw
0131            162            
0131            163            ; Check if the play counter is zero.  If so, stop playing sound.
0131 E530       164            mov a, w+0
0133 4531       165            orl a, w+1
0135 4532       166            orl a, w+2
0137 6015       167            jz stop_playing
0139            168            
0139            169            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
0139 74FF       170            mov a, #0xff
013B 1530       171            dec w+0
013D B53007     172            cjne a, w+0, keep_playing
0140 1531       173            dec w+1
0142 B53102     174            cjne a, w+1, keep_playing
0145 1532       175            dec w+2
0147            176            
0147            177   keep_playing:
0147            178   
0147 12019A     179            lcall Send_SPI ; Read the next byte from the SPI Flash...
014A F5F5       180            mov AD1DAT3, a ; and send it to the DAC
014C            181            
014C 8006       182            sjmp CCU_ISR_Done
014E            183   
014E            184   stop_playing:
014E C2C8       185            clr TMOD20 ; Stop CCU timer
0150 D2A4       186            setb FLASH_CE  ; Disable SPI Flash
0152 C2A7       187            clr SOUND ; Turn speaker off
0154            188   
0154            189   CCU_ISR_Done:    
0154 D0D0       190            pop psw
0156 D0E0       191            pop acc
0158 32         192            reti
0159            193   
0159            194   ;---------------------------------;
0159            195   ; Initial configuration of ports. ;
0159            196   ; After reset the default for the ;
0159            197   ; pins is 'Open Drain'.  This     ;
0159            198   ; routine changes them pins to    ;
0159            199   ; Quasi-bidirectional like in the ;
0159            200   ; original 8051.                  ;
0159            201   ; Notice that P1.2 and P1.3 are   ;
0159            202   ; always 'Open Drain'. If those   ;
0159            203   ; pins are to be used as output   ;
0159            204   ; they need a pull-up resistor.   ;
0159            205   ;---------------------------------;
0159            206   Ports_Init:
0159            207       ; Configure all the ports in bidirectional mode:
0159 758400     208       mov P0M1, #00H
015C 758500     209       mov P0M2, #00H
015F 759100     210       mov P1M1, #00H
0162 759200     211       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0165 75A400     212       mov P2M1, #00H
0168 75A500     213       mov P2M2, #00H
016B 75B100     214       mov P3M1, #00H
016E 75B200     215       mov P3M2, #00H
0171 22         216            ret
0172            217   
0172            218   ;---------------------------------;
0172            219   ; Initialize ADC1/DAC1 as DAC1.   ;
0172            220   ; Warning, the ADC1/DAC1 can work ;
0172            221   ; only as ADC or DAC, not both.   ;
0172            222   ; The P89LPC9351 has two ADC/DAC  ;
0172            223   ; interfaces.  One can be used as ;
0172            224   ; ADC and the other can be used   ;
0172            225   ; as DAC.  Also configures the    ;
0172            226   ; pin associated with the DAC, in ;
0172            227   ; this case P0.4 as 'Open Drain'. ;
0172            228   ;---------------------------------;
0172            229   InitDAC1:
0172            230       ; Configure pin P0.4 (DAC1 output pin) as open drain
0172 438410     231            orl     P0M1,   #00010000B
0175 438510     232            orl     P0M2,   #00010000B
0178 75A128     233       mov ADMODB, #00101000B ; Select main clock/2 for ADC/DAC.  Also enable DAC1 output (Table 25 of reference manual)
017B 759704     234            mov     ADCON1, #00000100B ; Enable the converter
017E 75F580     235            mov AD1DAT3, #0x80     ; Start value is 3.3V/2 (zero reference for AC WAV file)
0181 22         236            ret
0182            237   
0182            238   ;---------------------------------;
0182            239   ; Change the internal RC osc. clk ;
0182            240   ; from 7.373MHz to 14.746MHz.     ;
0182            241   ;---------------------------------;
0182            242   Double_Clk:
0182 90FFDE     243       mov dptr, #CLKCON
0185 E0         244       movx a, @dptr
0186 4408       245       orl a, #00001000B ; double the clock speed to 14.746MHz
0188 F0         246       movx @dptr,a
0189 22         247            ret
018A            248   
018A            249   ;---------------------------------;
018A            250   ; Initialize the SPI interface    ;
018A            251   ; and the pins associated to SPI. ;
018A            252   ;---------------------------------;
018A            253   Init_SPI:
018A            254            ; Configure MOSI (P2.2), CS* (P2.4), and SPICLK (P2.5) as push-pull outputs (see table 42, page 51)
018A 53A4CB     255            anl P2M1, #low(not(00110100B))
018D 43A534     256            orl P2M2, #00110100B
0190            257            ; Configure MISO (P2.3) as input (see table 42, page 51)
0190 43A408     258            orl P2M1, #00001000B
0193 53A5F7     259            anl P2M2, #low(not(00001000B)) 
0196            260            ; Configure SPI
0196 75E2D0     261            mov SPCTL, #11010000B ; Ignore /SS, Enable SPI, DORD=0, Master=1, CPOL=0, CPHA=0, clk/4
0199 22         262            ret
019A            263   
019A            264   ;---------------------------------;
019A            265   ; Sends AND receives a byte via   ;
019A            266   ; SPI.                            ;
019A            267   ;---------------------------------;
019A            268   Send_SPI:
019A F5E3       269            mov SPDAT, a
019C            270   Send_SPI_1:
019C E5E1       271            mov a, SPSTAT 
019E 30E7FB     272            jnb acc.7, Send_SPI_1 ; Check SPI Transfer Completion Flag
01A1 F5E1       273            mov SPSTAT, a ; Clear SPI Transfer Completion Flag
01A3 E5E3       274            mov a, SPDAT ; return received byte via accumulator
01A5 22         275            ret
01A6            276   
01A6            277   ;---------------------------------;
01A6            278   ; SPI flash 'write enable'        ;
01A6            279   ; instruction.                    ;
01A6            280   ;---------------------------------;
01A6            281   Enable_Write:
01A6 C2A4       282            clr FLASH_CE
01A8 7406       283            mov a, #WRITE_ENABLE
01AA 12019A     284            lcall Send_SPI
01AD D2A4       285            setb FLASH_CE
01AF 22         286            ret
01B0            287   
01B0            288   ;---------------------------------;
01B0            289   ; This function checks the 'write ;
01B0            290   ; in progress' bit of the SPI     ;
01B0            291   ; flash memory.                   ;
01B0            292   ;---------------------------------;
01B0            293   Check_WIP:
01B0 C2A4       294            clr FLASH_CE
01B2 7405       295            mov a, #READ_STATUS
01B4 12019A     296            lcall Send_SPI
01B7 7455       297            mov a, #0x55
01B9 12019A     298            lcall Send_SPI
01BC D2A4       299            setb FLASH_CE
01BE 20E0EF     300            jb acc.0, Check_WIP ;  Check the Write in Progress bit
01C1 22         301            ret
01C2            302            
01C2            303   ; Display a binary number in the LCD (must be less than 99).  Number to display passed in accumulator.
01C2            304   LCD_number:
01C2 C0E0       305            push acc
01C4 75F00A     306            mov b, #10
01C7 84         307            div ab
01C8 4430       308            orl a, #'0'
01CA 1200AC     309            lcall ?WriteData
01CD E5F0       310            mov a, b
01CF 4430       311            orl a, #'0'
01D1 1200AC     312            lcall ?WriteData
01D4 D0E0       313            pop acc
01D6 22         314            ret
01D7            315   
01D7            316   ; Sounds we need in the SPI flash: 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 30; 40; 50; minutes; seconds;
01D7            317   ; Approximate index of sounds in file 'stop_watch.wav'
01D7            318   ; This was generated using: computer_sender -Asw_index.asm -S2000 stop_watch.wav
01D7            319   sound_index:
01D7 000AE0     320       db 0x00, 0x0a, 0xe0 ; 0 
01DA 006478     321       db 0x00, 0x64, 0x78 ; 1 
01DD 00A0BD     322       db 0x00, 0xa0, 0xbd ; 2 
01E0 0020C9     323       db 0x00, 0x20, 0xc9 ; 3 
01E3 017205     324       db 0x01, 0x72, 0x05 ; 4 
01E6 01D886     325       db 0x01, 0xd8, 0x86 ; 5 
01E9 025805     326       db 0x02, 0x58, 0x05 ; 6 
01EC 02A8A6     327       db 0x02, 0xa8, 0xa6 ; 7 
01EF 03186A     328       db 0x03, 0x18, 0x6a ; 8 
01F2 037804     329       db 0x03, 0x78, 0x04 ; 9 
01F5 03B205     330       db 0x03, 0xb2, 0x05 ; 10 
01F8 042A05     331       db 0x04, 0x2a, 0x05 ; 11 
01FB 049AB5     332       db 0x04, 0x9a, 0xb5 ; 12 
01FE 04FFB5     333       db 0x04, 0xff, 0xb5 ; 13 
0201 0573B5     334       db 0x05, 0x73, 0xb5 ; 14 
0204 05FFB5     335       db 0x05, 0xff, 0xb5 ; 15 
0207 065AB5     336       db 0x06, 0x5a, 0xb5 ; 16 
020A 06CC40     337       db 0x06, 0xcc, 0x40 ; 17 
020D 0754B5     338       db 0x07, 0x54, 0xb5 ; 18 
0210 07BA5D     339       db 0x07, 0xba, 0x5d ; 19 
0213 083AB5     340       db 0x08, 0x3a, 0xb5 ; 20 -------------change made by steven 
0216 088EEE     341       db 0x08, 0x8e, 0xee ; 21 - 30
0219 090110     342       db 0x09, 0x01, 0x10 ; 22 - 40 
021C 094A00     343       db 0x09, 0x4a, 0x00 ; 23 - 50 
021F 09CA99     344       db 0x09, 0xca, 0x99 ; 24 - 60 
0222 0A1A00     345       db 0x0a, 0x1a, 0x00 ; 25 - 70 
0225 0A9900     346       db 0x0a, 0x99, 0x00 ; 26 - 80 
0228 0AFD00     347       db 0x0a, 0xfd, 0x00 ; 27 - 90 
022B 0B5A00     348       db 0x0b, 0x5a, 0x00 ; 28 - 100 
022E 0BCA00     349       db 0x0b, 0xca, 0x00 ; 29 - 200 
0231 0C3F00     350       db 0x0c, 0x3f, 0x00 ; 30 - the current state is  
0234 0CC000     351       db 0x0c, 0xc0, 0x00 ; 31 - the current temperature is 
0237 0D3400     352       db 0x0d, 0x34, 0x00 ; 32 - too hot 
023A 0D7500     353       db 0x0d, 0x75, 0x00 ; 33 - ramp to soak
023D 0E0000     354       db 0x0e, 0x00, 0x00 ; 34 - soaking
0240 0E6500     355       db 0x0e, 0x65, 0x00 ; 35 - ramp to peak
0243 0F0000     356       db 0x0f, 0x00, 0x00 ; 36 - reflow
0246 0F5000     357       db 0x0f, 0x50, 0x00 ; 37 - cooling
0249 0FA500     358       db 0x0f, 0xa5, 0x00 ; 38 - degrees celsius---------change made by magan
024C            359   
024C            360   ; Size of each sound in 'sound_index'
024C            361   ; Generated using: computer_sender -Asw_index.asm -S2000 stop_watch.wav
024C            362   Size_Length:
024C 0061A8     363       db 0x00, 0x61, 0xa8 ; 0
024F 0061A8     364       db 0x00, 0x61, 0xa8 ; 1
0252 0061A8     365       db 0x00, 0x61, 0xa8 ; 2
0255 0061A8     366       db 0x00, 0x61, 0xa8 ; 3
0258 0061A8     367       db 0x00, 0x61, 0xa8 ; 4
025B 0061A8     368       db 0x00, 0x61, 0xa8 ; 5
025E 0061A8     369       db 0x00, 0x61, 0xa8 ; 6
0261 0061A8     370       db 0x00, 0x61, 0xa8 ; 7
0264 0061A8     371       db 0x00, 0x61, 0xa8 ; 8
0267 0061A8     372       db 0x00, 0x61, 0xa8 ; 9
026A 0061A8     373       db 0x00, 0x61, 0xa8 ; 10
026D 0061A8     374       db 0x00, 0x61, 0xa8 ; 11
0270 0061A8     375       db 0x00, 0x61, 0xa8 ; 12
0273 0061A8     376       db 0x00, 0x61, 0xa8 ; 13
0276 0061A8     377       db 0x00, 0x61, 0xa8 ; 14
0279 0061A8     378       db 0x00, 0x61, 0xa8 ; 15
027C 0061A8     379       db 0x00, 0x61, 0xa8 ; 16
027F 0061A8     380       db 0x00, 0x61, 0xa8 ; 17
0282 0061A8     381       db 0x00, 0x61, 0xa8 ; 18
0285 0061A8     382       db 0x00, 0x61, 0xa8 ; 19
0288 0061A8     383       db 0x00, 0x61, 0xa8 ; 20
028B 0061A8     384       db 0x00, 0x61, 0xa8 ; 21 - 30
028E 0061A8     385       db 0x00, 0x61, 0xa8 ; 22 - 40
0291 0061A8     386       db 0x00, 0x61, 0xa8 ; 23 - 50
0294 0061A8     387       db 0x00, 0x61, 0xa8 ; 24 - 60
0297 0061A8     388       db 0x00, 0x61, 0xa8 ; 25 - 70
029A 0061A8     389       db 0x00, 0x61, 0xa8 ; 26 - 80
029D 0061A8     390       db 0x00, 0x61, 0xa8 ; 27 - 90
02A0 007530     391       db 0x00, 0x75, 0x30 ; 28 - 100
02A3 007530     392       db 0x00, 0x75, 0x30 ; 29 - 200
02A6 007530     393       db 0x00, 0x75, 0x30 ; 30 - "Current state"
02A9 007981     394       db 0x00, 0x79, 0x81 ; 31 - "Current temperature"
02AC 0061A8     395       db 0x00, 0x61, 0xa8 ; 32 - too hot 
02AF 007530     396       db 0x00, 0x75, 0x30 ; 33 - ramp to soak
02B2 007530     397       db 0x00, 0x75, 0x30 ; 34 - soaking
02B5 007530     398       db 0x00, 0x75, 0x30 ; 35 - ramp to peak
02B8 007530     399       db 0x00, 0x75, 0x30 ; 36 - reflow
02BB 007530     400       db 0x00, 0x75, 0x30 ; 37 - cooling
02BE 007530     401       db 0x00, 0x75, 0x30 ; 38 - degrees celsius
02C1            402       
02C1            403   
02C1            404   ; The sound and its length from the two tables above is passed in the accumulator.
02C1            405   Play_Sound_Using_Index:
02C1 D2A7       406            setb SOUND ; Turn speaker on
02C3 C2C8       407            clr TMOD20 ; Stop the CCU from playing previous request
02C5 D2A4       408            setb FLASH_CE
02C7            409            
02C7            410            ; There are three bytes per row in our tables, so multiply index by three
02C7 75F003     411            mov b, #3
02CA A4         412            mul ab
02CB F8         413            mov R0, a ; Make a copy of the index*3
02CC            414            
02CC C2A4       415            clr FLASH_CE ; Enable SPI Flash
02CE 7403       416            mov a, #READ_BYTES
02D0 12019A     417            lcall Send_SPI
02D3            418            ; Set the initial position in memory of where to start playing
02D3 9001D7     419            mov dptr, #sound_index
02D6 E8         420            mov a, R0
02D7 93         421            movc a, @a+dptr
02D8 12019A     422            lcall Send_SPI
02DB A3         423            inc dptr
02DC E8         424            mov a, R0
02DD 93         425            movc a, @a+dptr
02DE 12019A     426            lcall Send_SPI
02E1 A3         427            inc dptr
02E2 E8         428            mov a, R0
02E3 93         429            movc a, @a+dptr
02E4 12019A     430            lcall Send_SPI
02E7            431            ; Now set how many bytes to play
02E7 90024C     432            mov dptr, #Size_Length
02EA E8         433            mov a, R0
02EB 93         434            movc a, @a+dptr
02EC F532       435            mov w+2, a
02EE A3         436            inc dptr
02EF E8         437            mov a, R0
02F0 93         438            movc a, @a+dptr
02F1 F531       439            mov w+1, a
02F3 A3         440            inc dptr
02F4 E8         441            mov a, R0
02F5 93         442            movc a, @a+dptr
02F6 F530       443            mov w+0, a
02F8            444            
02F8 7400       445            mov a, #0x00 ; Request first byte to send to DAC
02FA 12019A     446            lcall Send_SPI
02FD            447            
02FD D2C8       448            setb TMOD20 ; Start playback by enabling CCU timer
02FF            449   
02FF 22         450            ret
0300            451   
0300            452   ;---------------------------------------------------------------------------------;
0300            453   ; This is the FSM that plays minutes and seconds after the STOP button is pressed ;
0300            454   ; The state diagram of this FSM is available as 'Stop_Watch_FSM.pdf'              ;
0300            455   ;---------------------------------------------------------------------------------;
0300            456   ; Variables
0300            457   ; degrees - temperature reading from sensor
0300            458   
0300            459   T2S_FSM:
0300 E534       460            mov a, T2S_FSM_state
0302            461   ;-----------------------------------------------------00---------------------------------------------    
0302            462   T2S_FSM_State00:
0302 741F       463            mov a, #31 ; Index 31 has "Current temperature" audio clip
0304 1202C1     464            lcall Play_Sound_Using_Index
0307            465   ;------------------------------------------------------0---------------------------------------------    
0307            466   T2S_FSM_State0: ; Checks for start signal (T2S_FSM_Start==1)
0307 B4001A     467            cjne a, #0, T2S_FSM_State1
030A 300016     468            jnb T2S_FSM_Start, T2S_FSM_State0_Done
030D            469            ; Check if degrees is larger than 20
030D C3         470            clr c
030E E533       471            mov a, degrees
0310 9414       472            subb a, #20
0312 5009       473            jnc degrees_gt_20
0314            474            ; Check if degrees is larger than 100
0314 C3         475            clr c
0315 E533       476            mov a, degrees
0317 9464       477            subb a, #100
0319 5005       478            jnc degrees_gt_100
031B 8006       479            sjmp T2S_FSM_State0_Done
031D            480   degrees_gt_20:
031D 753403     481            mov T2S_FSM_state, #3
0320            482   degrees_gt_100:
0320 753406     483            mov T2S_FSM_state, #6
0323            484   T2S_FSM_State0_Done:
0323 22         485            ret
0324            486   ;-------------------------------------------------------1----------------------------------------------
0324            487   T2S_FSM_State1: ; Play degrees when degree is less than 20
0324 B40109     488            cjne a, #1, T2S_FSM_State2
0327 E533       489            mov a, degrees ; Index 28 has "100" audio clip
0329 1202C1     490            lcall Play_Sound_Using_Index
032C 753402     491            mov T2S_FSM_state, #2
032F 22         492            ret
0330            493   ;-------------------------------------------------------2-----------------------------------------------
0330            494   T2S_FSM_State2: ; Stay in this state until State1 finishes playing
0330 B40207     495            cjne a, #2, T2S_FSM_State3
0333 20C803     496       jb TMOD20, T2S_FSM_State2_Done
0336 75340B     497       mov T2S_FSM_State, #11
0339            498   T2S_FSM_State2_Done:
0339 22         499            ret
033A            500   ;-------------------------------------------------------3-----------------------------------------------   
033A            501   T2S_FSM_State3: ; play the tens(21~99)
033A B4030F     502            cjne a, #3, T2S_FSM_State4
033D E533       503            mov a, degrees
033F 75F00A     504            mov b, #10
0342 84         505            div ab
0343 2412       506            add a, #18
0345 1202C1     507            lcall Play_Sound_Using_Index
0348 753404     508            mov T2S_FSM_State, #4
034B 22         509            ret
034C            510   ;-------------------------------------------------------4------------------------------------------------        
034C            511   T2S_FSM_State4: ; Stay in this state until State2 finishes playing
034C B40407     512            cjne a, #4, T2S_FSM_State5
034F 20C803     513            jb TMOD20, T2S_FSM_State4_Done
0352 753405     514            mov T2S_FSM_state, #5
0355            515   T2S_FSM_State4_Done:
0355 22         516            ret
0356            517   ;-------------------------------------------------------5-------------------------------------------------
0356            518   T2S_FSM_State5: ; play the remains
0356 B40511     519            cjne a, #5, T2S_FSM_State6
0359 E533       520            mov a, degrees
035B 75F00A     521            mov b, #10
035E 84         522            div ab
035F E5F0       523            mov a, b
0361 6003       524            jz T2S_FSM_State5_Done ;for preventing to playing like forty zero
0363 1202C1     525            lcall Play_Sound_Using_Index
0366            526   T2S_FSM_State5_Done:
0366 753402     527            mov T2s_FSM_State, #2
0369 22         528            ret
036A            529   ;--------------------------------------------------------6-------------------------------------------------
036A            530   T2S_FSM_State6: ; Play the hundreds(101~240)
036A B4060F     531            cjne a, #6, T2S_FSM_State7
036D E533       532            mov a, degrees
036F 75F064     533            mov b, #100
0372 84         534            div ab
0373 241B       535            add a, #27
0375 1202C1     536            lcall Play_Sound_Using_Index
0378 753407     537            mov T2S_FSM_state, #7
037B 22         538            ret
037C            539   ;--------------------------------------------------------7--------------------------------------------------
037C            540   T2S_FSM_State7: ; Stay in this state until State2 finishes playing
037C B40707     541            cjne a, #7, T2S_FSM_State8
037F 20C8D3     542            jb TMOD20, T2S_FSM_State4_Done
0382 753408     543            mov T2S_FSM_state, #8
0385            544   T2S_FSM_State7_Done:
0385 22         545            ret
0386            546   ;--------------------------------------------------------8---------------------------------------------------
0386            547   T2S_FSM_State8: ; Play the tens(101~240)
0386 B40815     548            cjne a, #8, T2S_FSM_State9
0389 E533       549            mov a, degrees
038B 75F064     550            mov b, #100
038E 84         551            div ab
038F E5F0       552            mov a, b
0391 75F00A     553            mov b, #10
0394 84         554            div ab
0395 2412       555            add a, #18
0397 1202C1     556            lcall Play_Sound_Using_Index
039A 753409     557            mov T2S_FSM_state, #9
039D 22         558            ret
039E            559   ;--------------------------------------------------------9---------------------------------------------------
039E            560   T2S_FSM_State9: ; Stay in this state until State2 finishes playing
039E B40907     561            cjne a, #9, T2S_FSM_State10
03A1 20C803     562            jb TMOD20, T2S_FSM_State9_Done
03A4 75340A     563            mov T2S_FSM_state, #10
03A7            564   T2S_FSM_State9_Done:
03A7 22         565            ret
03A8            566   ;--------------------------------------------------------10-------------------------------------------------
03A8            567   T2S_FSM_State10: ; Play the remains
03A8 B40A85     568            cjne a, #10, T2S_FSM_State2
03AB E533       569            mov a, degrees
03AD 75F064     570            mov b, #100
03B0 84         571            div ab
03B1 E5F0       572            mov a, b
03B3 75F00A     573            mov b, #10
03B6 84         574            div ab
03B7 E5F0       575            mov a, b
03B9 6003       576            jz T2S_FSM_State10_Done ;for preventing to playing like forty zero
03BB 1202C1     577            lcall Play_Sound_Using_Index
03BE            578   T2S_FSM_State10_Done:
03BE 753402     579            mov T2s_FSM_State, #2
03C1 22         580            ret
03C2            581   ;---------------------------------------------------------11-------------------------------------------------
03C2            582   T2S_FSM_State11: ; play the word 'degrees'
03C2 B40B09     583            cjne a, #11, T2S_FSM_State12
03C5 7426       584            mov a, #38 ;the index 38 has the word 'degree celcius'
03C7 1202C1     585            lcall Play_Sound_Using_Index
03CA 75340C     586            mov T2S_FSM_state, #12
03CD 22         587            ret
03CE            588   ;---------------------------------------------------------12-------------------------------------------------
03CE            589   T2S_FSM_State12: ; Stay in this state until sounds finishes playing
03CE B40C09     590            cjne a, #12, T2S_FSM_Error
03D1 20C805     591            jb TMOD20, T2S_FSM_State12_Done
03D4 C200       592            clr T2S_FSM_Start
03D6 753400     593            mov T2S_FSM_state, #0
03D9            594   T2S_FSM_State12_Done:
03D9 22         595            ret
03DA            596   
03DA            597   T2S_FSM_Error: ; If this state is reached, there is an error in FSM- restart it
03DA 753400     598            mov T2S_FSM_state, #0
03DD C200       599            clr T2S_FSM_Start
03DF 22         600            ret
03E0            601   ; End of FSM
03E0            602   
03E0 53746F70   603   Line1: db 'Stop watch', 0
     20776174
     636800
03EB 30303A30   604   Line2: db '00:00', 0
     3000
03F1            605            
03F1            606   ;---------------------------------;
03F1            607   ; Main program. Includes hardware ;
03F1            608   ; initialization and 'forever'    ;
03F1            609   ; loop.                           ;
03F1            610   ;---------------------------------;
03F1            611   MainProgram:
03F1 75817F     612       mov SP, #0x7F
03F4            613       
03F4 120159     614       lcall Ports_Init ; Default all pins as bidirectional I/O. See Table 42.
03F7 1200B6     615       lcall LCD_4BIT
03FA 120182     616       lcall Double_Clk
03FD 120172     617            lcall InitDAC1 ; Call after 'Ports_Init'
0400 120113     618            lcall CCU_Init
0403 12018A     619            lcall Init_SPI
0406            620   ;        lcall Timer1_Init
0406            621            
0406 C28E       622            clr TR1 ; Stop timer 1
0408            623            
0408 C2C8       624            clr TMOD20 ; Stop CCU timer
040A D2AF       625            setb EA ; Enable global interrupts.
040C            626            
040C C2A7       627            clr SOUND ; Turn speaker off
040E            628   
040E            629            ; Initialize variables
040E C200       630            clr T2S_FSM_Start
0410 753400     631            mov T2S_FSM_state, #0
0413            632   ;        mov minutes, #0
0413            633   ;        mov seconds, #0
0413 753300     634            mov degrees, #0
0416            635   
0416 C0E0       636            push acc
0418 7401       636            mov a, #1
041A 14         636            dec a
041B 1200F8     636            lcall ?Set_Cursor_1 ; Select column and row
041E D0E0       636            pop acc
0420 C083       637            push dph
0422 C082       637            push dpl
0424 C0E0       637            push acc
0426 9003E0     637            mov dptr, #Line1
0429 1200EB     637            lcall ?Send_Constant_String
042C D0E0       637            pop acc
042E D082       637            pop dpl
0430 D083       637            pop dph
0432 C0E0       638            push acc
0434 7401       638            mov a, #1
0436 14         638            dec a
0437 1200F6     638            lcall ?Set_Cursor_2 ; Select column and row
043A D0E0       638            pop acc
043C C083       639            push dph
043E C082       639            push dpl
0440 C0E0       639            push acc
0442 9003EB     639            mov dptr, #Line2
0445 1200EB     639            lcall ?Send_Constant_String
0448 D0E0       639            pop acc
044A D082       639            pop dpl
044C D083       639            pop dph
044E            640       
044E            641   ; Test that we can play any sound from the index
044E            642   ;        mov a, #16
044E            643   ;        lcall Play_Sound_Using_Index
044E            644   ;        jb TMOD20, $ ; Wait for sound to finish playing
044E            645            
044E            646   
044E            647   ; Test that we can play any minutes:seconds combination properly (although for 01:01 it says 'one minutes one seconds')
044E 753319     648            mov  degrees, #25
0451 D200       649            setb T2S_FSM_Start
0453            650            
0453            651   forever_loop:
0453 120300     652            lcall T2S_FSM ; Run the state machine that plays minutes:seconds
0456            653            
0456 300100     654            jnb seconds_flag, check_START_Push_Button
0459            655            ;One second has passed, refresh the LCD with new time
0459            656   ;        clr seconds_flag
0459            657   ;        Set_Cursor(2, 1)
0459            658   ;        mov a, minutes
0459            659   ;   lcall LCD_number
0459            660   ;        Set_Cursor(2, 4)
0459            661   ;        mov a, seconds
0459            662   ;   lcall LCD_number
0459            663            
0459            664   check_START_Push_Button:
0459 20A613     665            jb START, check_STOP_Push_Button
045C C002       666            push AR2
045E 7A32       666            mov R2, #50
0460 120067     666            lcall ?Wait_Milli_Seconds
0463 D002       666            pop AR2 ; debounce
0465 20A607     667            jb START, check_STOP_Push_Button
0468 30A6FD     668            jnb START, $
046B D28E       669            setb TR1 ; Start Timer 1.  The ISR for timer 1 increments minutes and seconds when running.
046D 8018       670            sjmp check_DONE
046F            671            
046F            672   check_STOP_Push_Button:
046F 20B015     673       jb STOP, check_CLEAR_Push_Button
0472 C002       674            push AR2
0474 7A32       674            mov R2, #50
0476 120067     674            lcall ?Wait_Milli_Seconds
0479 D002       674            pop AR2 ; debounce
047B 20B009     675            jb STOP, check_CLEAR_Push_Button
047E 30B0FD     676            jnb STOP, $
0481 C28E       677            clr TR1 ; Stop timer 1.
0483 D200       678            setb T2S_FSM_Start ; This plays the current minutes:seconds by making the state machine get out of state zero.
0485 8000       679            sjmp check_DONE
0487            680            
0487            681   check_CLEAR_Push_Button:
0487            682   ;   jb CLEAR, check_DONE
0487            683   ;        Wait_Milli_Seconds(#50) ; debounce
0487            684   ;        jb CLEAR, check_DONE
0487            685   ;        jnb CLEAR, $
0487            686   ;   clr TR1 ; Stop timer 1.
0487            687   ;   mov minutes, #0
0487            688   ;   mov seconds, #0
0487            689   ;   setb seconds_flag ; Force update of LCD with new time, in this case 00:00
0487            690   ;        sjmp check_DONE
0487            691            
0487            692   check_DONE:      
0487 020453     693            ljmp forever_loop
048A            694   
048A            695   END
